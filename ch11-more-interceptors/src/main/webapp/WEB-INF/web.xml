<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--
    声明，注册springmvc的核心对象DispatcherServlet
    需要在启动Tomcat服务器后，创建DispatcherServlet对象实例。
    DispatcherServlet在创建过程中，会同时创建springMVC容器对象，
    读取springMVC的配置文件，将其中的对象创建。
    当用户发起请求时，可直接使用所创建的对象。

    servlet初始化执行 init（）方法，DispatcherServlet在此方法中{
         创建容器：new ClassPathXmlApplicationContext（“xxx.xml”）；
         容器放入：getServletContext（）.setAttribute（key，↑）


java.io.FileNotFoundException:
Could not open ServletContext resource [/WEB-INF/sringmvc-servlet.xml]
springMVC创建对象时，所读取的文件默认路径↑【默认规则...】
    -->
    <servlet>
        <servlet-name>sringmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--自定义springMVC读取的配置文件位置的的属性-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--
        期望在Tomcat启动时，创建servlet对象
        load-on-startup:表示Tomcat启动后创建对象的顺序，它的值是整数，数值越小，创建对象的时间越早
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>sringmvc</servlet-name>
        <!--
        使用框架时，url别名可以使用两种值
        1.使用扩展名 *.xxx 常用方式 *.do/*.action/*.mvc
        2.使用“/”
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>